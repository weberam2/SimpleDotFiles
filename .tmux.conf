# ==========================
# === Things to Remember ===
# ==========================

#Start copy mode: Prefix+[
#+-------------------+--------------------+---------------+
#| Action            | emacs              | vi            |
#+-------------------+--------------------+---------------+
#| move character    | Up Down Left Right | j k h l       |
#| move line         | Ctrl-Up Ctrl-Down  | Ctrl+Y Ctrl+E |
#| move whole screen | PageUp PageDown    | Ctrl+B Ctrl+F |
#| search            | Ctrl+S             | /             |
#| start selection   | Ctrl+Space         | Space         |
#| copy selection    | Ctrl+W             | Enter         |
#| clear selection   | Ctrl+G             | Escape        |
#| exit copy mode    | Escape             | q             |
#+-------------------+--------------------+---------------+

# prefix + w    # list windows
# prefix + s    # list sessions
# prefix + q    # show numbers on each pane; then press the number of the pane you want to go to

# =====================
# === Basic Options ===
# =====================

set -sg terminal-overrides ",*:RGB"  # true color support
set -g escape-time 0  # disable delays on escape sequences
set -g mouse on
set -g renumber-windows on  # keep numbering sequential
set -g repeat-time 1000  # increase "prefix-free" window
set -g status-keys vi # use vi in status mode
set -g history-limit 20000
setw -g mode-keys vi # use vi in copy mode (prefix + [)

# Options: start indexes from 1
set -g base-index 1
set -g pane-base-index 1

# Change prefix
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# =====================
# === Design Tweaks ===
# =====================

# This whole block basically turns off all the noisy notifications 
# (flashing status bar, highlighting window names, alerts for activity/silence).
# So tmux behaves quietly and leaves your status bar clean.

set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none

# clock mode: prefix + t
setw -g clock-mode-colour yellow

# copy mode: prefix + [
setw -g mode-style 'fg=black bg=red bold'

# panes
set -g pane-border-style 'fg=red'
set -g pane-active-border-style 'fg=yellow'

# statusbar
set -g status-position bottom
set -g status-justify left
set -g status-style bg=default,fg=black,bright
set -g window-status-current-style "#{?window_zoomed_flag,fg=yellow,fg=magenta,nobold}"
set -g window-status-bell-style "fg=red,nobold"
set -g status-left ''
set -g status-left-length 10
set -g status-right-style 'fg=black bg=orange'
set -g status-right "#[fg=black,bright] %Y-%m-%d %H:%M | Host #H | Session #S"
set -g status-right-length 50
setw -g window-status-current-style 'fg=black bg=red'
setw -g window-status-current-format ' #I #W #F '
setw -g window-status-style 'fg=red bg=black'
setw -g window-status-format ' #I #[fg=white]#W #[fg=yellow]#F '
setw -g window-status-bell-style 'fg=yellow bg=red bold'

# messages
set -g message-style 'fg=yellow bg=red bold'

# ===================
# === Keybindings ===
# ===================

unbind , # rename-window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
unbind "\$" # rename-session
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

bind c new-window -c "#{pane_current_path}"
# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Keybindings: panes
bind k select-pane -U
bind h select-pane -L
bind j select-pane -D
bind l select-pane -R

bind -n M-k select-pane -U
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-l select-pane -R
bind -n M-z resize-pane -Z

bind -r K resize-pane -U
bind -r H resize-pane -L
bind -r J resize-pane -D
bind -r L resize-pane -R

bind z resize-pane -Z # zoom

# Keybindings: disable repeat for arrows
bind Up select-pane -U
bind Left select-pane -L
bind Down select-pane -D
bind Right select-pane -R

# Keybindings: split
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# Keybindings: windows
# NOTE: the bind -n means you don't need the leader key (C-a)
bind -n C-Tab next-window
bind -n C-S-Tab previous-window

bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9

# ==============
# === Reload ===
# ==============

# reload config file (change file location to your the tmux.conf you want to use)
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# =======================
# ===  Tmux navigator ===
# =======================

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator

vim_pattern='(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +${vim_pattern}$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# =============
# === Popup ===
# =============

bind C-t display-popup \
  -d "#{pane_current_path}" \
  -w 75% \
  -h 75% \
  -E "zsh"

# ==============
# === Remote ===
# ==============

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237
# Also, change some visual styles when window keys are off

color_status_text="colour245"
color_window_off_status_bg="colour238"
color_light="white" #colour015
color_dark="colour232" # black= colour232
color_window_off_status_current_bg="colour254"

bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    set status-left " OFF " \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  set -u status-left \;\
  refresh-client -S
